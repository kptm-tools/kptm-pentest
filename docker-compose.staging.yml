services:
  
  # For automatically redeploying containers on new images
  watchtower:
    image: containrrr/watchtower
    command: 
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  web-ui:
    image: ghcr.io/kptm-tools/web_ui:dev
    container_name: webui
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    tty: true
    ports: 
        - 80:80
    networks:
        - app_net

  core-service:
    image: ghcr.io/kptm-tools/core_service:dev 
    container_name: coreservice
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    tty: true
    build: ./core-service
    ports:
      - 8000:8000
    restart: on-failure
    depends_on: 
      - db
      - fusionauth
      - nats
    healthcheck: 
      test: "curl -f http://localhost:8000/healthcheck"
    environment:
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      FUSIONAUTH_API_KEY: ${FUSIONAUTH_API_KEY}
      FUSIONAUTH_HOST: fusionauth
      FUSIONAUTH_PORT: 9011
      FUSIONAUTH_BLUEPRINT_TENANTID: ${FUSIONAUTH_BLUEPRINT_TENANTID}
      FUSIONAUTH_BLUEPRINT_APPID: ${FUSIONAUTH_BLUEPRINT_APPID}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${CORE_DB_NAME}
      DB_HOST: db
      DB_PORT: 5432
      NATS_HOST: nats
      NATS_PORT: 4222
    networks:
        - db_net
        - app_net

  information-gathering:
    image: ghcr.io/kptm-tools/information_gathering:dev 
    container_name: informationgathering
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    tty: true
    build: ./information-gathering
    restart: on-failure
    depends_on:
      - nats
    environment:
      NATS_HOST: nats
      NATS_PORT: 4222
    networks:
        - app_net
  
  vulnerability-analysis:
    image: ghcr.io/kptm-tools/vulnerability_analysis:dev 
    container_name: vulnerabilityanalysis
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    tty: true
    build: ./vulnerability-analysis
    restart: on-failure
    depends_on:
      - nats
    environment:
      NATS_HOST: nats
      NATS_PORT: 4222
    networks:
        - app_net

  nats:
    image: nats:latest
    ports:
      - 4222:4222
      - 8222:8222
      - 6222:6222
    healthcheck:
      test: "curl -f http://localhost:8222/healthz"
    networks:
      - app_net

  db:
    image: postgres:16.0-bookworm
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db_net
    restart: unless-stopped
    ports:
      - 5432:5432 # For checking locally with a GUI
    volumes:
      - db_data:/var/lib/postgresql/data

  fusionauth:
    image: fusionauth/fusionauth-app:latest
    depends_on:
      db:
        condition: service_healthy
      search:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://db:5432/fusionauth
      DATABASE_ROOT_USERNAME: ${POSTGRES_USER}
      DATABASE_ROOT_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      FUSIONAUTH_APP_MEMORY: ${FUSIONAUTH_APP_MEMORY}
      FUSIONAUTH_APP_RUNTIME_MODE: ${FUSIONAUTH_APP_RUNTIME_MODE}
      FUSIONAUTH_APP_URL: http://fusionauth:9011
      SEARCH_SERVERS: http://search:9200
      SEARCH_TYPE: elasticsearch
      FUSIONAUTH_APP_KICKSTART_FILE: ${FUSIONAUTH_APP_KICKSTART_FILE}
      FUSIONAUTH_API_KEY: ${FUSIONAUTH_API_KEY}
      FUSIONAUTH_BLUEPRINT_TENANTID: ${FUSIONAUTH_BLUEPRINT_TENANTID}
      FUSIONAUTH_BLUEPRINT_APPID: ${FUSIONAUTH_BLUEPRINT_APPID}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}

    networks:
      - db_net
      - search_net
    restart: unless-stopped
    ports:
      - 9011:9011
    volumes:
      - fusionauth_config:/usr/local/fusionauth/config
      - ./utils/fusionauth/kickstart:/usr/local/fusionauth/kickstart

  search:
    image: opensearchproject/opensearch:2.11.0
    environment:
      cluster.name: fusionauth
      discovery.type: single-node
      node.name: search
      plugins.security.disabled: true
      bootstrap.memory_lock: true
      OPENSEARCH_JAVA_OPTS: ${OPENSEARCH_JAVA_OPTS}
    healthcheck:
      interval: 10s
      retries: 80
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:9200/
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    volumes:
      - search_data:/usr/share/opensearch/data
    networks:
      - search_net

networks:
  db_net:
    driver: bridge
  search_net:
    driver: bridge
  app_net:
    driver: bridge

volumes:
  db_data:
  fusionauth_config:
  search_data:
